#!/usr/bin/env node

var path = require( "path" ),
    spawn = require('child_process').spawn,
    normalize = function( p ){ return '"' + path.normalize( p ) + '"'; },
    join = path.join,
    // Make Windows happy, use `node <path>`
    nodeExec = function( p ){ return 'node "' + p + '"'; },
    pythonExec = function( p ){ return 'python "' + p + '"'; },
    SLICE = Array.prototype.slice,

    JSLINT = nodeExec( normalize( "./node_modules/jshint/bin/hint" ) ),
    HTML5LINT = pythonExec( normalize( "./external/html5-lint/html5check.py" ) ),
    CSSLINT = nodeExec( normalize( "./node_modules/csslint/cli.js" ) ),
    UGLIFY = nodeExec( normalize( "./node_modules/uglify-js/bin/uglifyjs" ) ),
    RJS = nodeExec( normalize( "./node_modules/requirejs/bin/r.js" ) ),
    LESS = nodeExec( normalize( "./node_modules/less/bin/lessc" ) ),
    DOX = normalize( "./tools/dox.py" ),

    SRC_DIR = 'src',
    EDITORS_DIR = 'editors',
    TEMPLATES_DIR = 'templates/basic',
    DIST_DIR = 'dist',
    DOCS_DIR = 'docs',
    TEST_DIR = 'test',
    CSS_DIR = 'css',
    CORNFIELD_DIR = 'cornfield',

    DEFAULT_CONFIG = './src/default-config',

    BUTTER_LESS_FILE = join( CSS_DIR, "butter.ui.less" ),
    BUTTER_CSS_FILE_COMMENT = "/* THIS FILE WAS GENERATED BY A TOOL, DO NOT EDIT. SEE " +
                              BUTTER_LESS_FILE + " */",
    BUTTER_CSS_FILE = join( CSS_DIR, "/butter.ui.css" ),

    BUTTERED_POPCORN = join( DIST_DIR, '/buttered-popcorn.js' ),
    BUTTERED_POPCORN_MIN = join( DIST_DIR, '/buttered-popcorn.min.js' ),

    PACKAGE_NAME = "butter";

require('shelljs/make');

// To supress CSS warnings/errors for a particular line, end the line
// with a comment indicating you want CSS Lint to ignore this line's
// error(s).  Here are some examples:
//
//   -webkit-appearance: button; /* csslint-ignore */
//   -webkit-appearance: button; /*csslint-ignore*/
//   -webkit-appearance: button; /* csslint-ignore: This is being done because of iOS ... */
function checkCSSFile( filename, warnings, errors ) {
  var fileLines = cat( filename ).split( /\r?\n/ ),
    ignoreLines = "",
    // Look for: "blah blah blah /* csslint-ignore */" or
    //           "blah blah /*csslint-ignore: this is my reason*/"
    ignoreRegex = /\/\*\s*csslint-ignore[^*]*\*\/$/,
    // Errors look like: "css/butter.ui.css: line 186, col 3, Error..."
    lineRegex = /\: line (\d+),/;

  // Build a map of lines to ignore: "|14||27|" means ignore lines 14 and 27
  for( var i=0; i < fileLines.length; i++ ){
    if( ignoreRegex.test( fileLines[ i ] ) ) {
      ignoreLines += "|" + i + "|";
    }
  }

  // Run CSSLint across the file, check for errors/warnings and ignore if
  // they are ones we know about from above.
  var outputLines = exec(CSSLINT +
    ' --warnings=' + warnings +
    ' --errors=' + errors +
    ' --quiet --format=compact' +
    ' ' + filename, { silent: true } ).output.split( /\r?\n/ )
    .forEach( function( line ) {
      if( !line ) {
        return;
      }
      var number = "|" + lineRegex.exec( line )[1] + "|";
      if( ignoreLines.indexOf( number ) === -1 ) {
        echo( line );
      }
  });
}

function checkCSS( dir ) {
  echo('### Linting CSS files');

  // see cli.js --list-rules.
  var warnings = [
//    "important",
//    "adjoining-classes",
//    "duplicate-background-images",
//    "qualified-headings",
//    "fallback-colors",
//    "empty-rules",
//    "shorthand",
//    "overqualified-elements",
//    "import",
//    "regex-selectors",
//    "rules-count",
//    "font-sizes",
//    "universal-selector",
//    "unqualified-attributes",
    "zero-units"
  ].join(",");

  var errors = [
    "known-properties",
    "compatible-vendor-prefixes",
    "display-property-grouping",
    "duplicate-properties",
    "errors",
    "gradients",
    "font-faces",
    "floats",
    "vendor-prefix"
  ].join(",");


  var files = ls( dir );
  files.forEach( function( filename ) {
    filename = join( dir, filename );
    if( /\.css$/.test( filename ) ) {
      checkCSSFile( filename, warnings, errors );
    }
  });

}

function checkJS(){
  // Takes a string or an array of strings referring to directories.
  echo('### Linting JS files');

  var dirs = SLICE.call( arguments );

  // Get all js and json files in dirs
  var files = "";
  [ /\.js$/, /\.json$/ ].forEach( function( regexp ){
    files += find( dirs ).filter( function( file ) {
        return file.match( regexp );
      }).join(' ') + ' ';
  });

  // jshint with non-errors plus linting of json files
  exec(JSLINT + ' ' + files + ' --show-non-errors --extra-ext json');
}

target.all = function() {
  target.submodules();
  target.check();
  target.build();
};

target.clean = function() {
  rm('-fr', DIST_DIR);
};

target.dist = function() {
  mkdir('-p', DIST_DIR);
};

target.submodules = function() {
  echo('### Updating git submodules');

  exec('git submodule update --init --recursive');
};

function checkHTMLFile( filename, ignoreList ) {
  var printedHeader = false,
    printFooter = false;

  out = exec( HTML5LINT + " -h " + filename, { silent: true } ).output;

  if ( out ) {
    out = out.replace( "There were errors. (Tried in the text/html mode.)\n", "", "m" );

    // Break the set of errors apart, and inspect each for
    // matches in our ignoreList.  If not something we should
    // ignore, print each error.
    out.split( "\n\n" ).forEach( function( error ) {
      if ( !error.length ) {
        return;
      }
      var i = ignoreList.length,
        ignore;
      while ( i-- ) {
        ignore = ignoreList[ i ];
        // If the error string matches the ignore string, make sure
        // there isn't also a conditional when() function.  If there is
        // check that too.
        if ( error.indexOf( ignore.text ) > -1 ) {
          if ( ignore.when ) {
            if ( ignore.when( filename ) ) {
              return;
            }
          } else {
            return;
          }
        }
      }
      if ( !printedHeader ) {
        echo( "HTML5 Lint Issues for file: " + filename + "\n" );
        printedHeader = true;
        printFooter = true;
      }
      echo( error + "\n" );
    });

    if ( printFooter ) {
      echo( "\n" );
    }
  }
}

target["check-html"] = function() {
  echo('### Linting HTML - requires network access');

  // Poor-man's HTML Doc vs. Fragment check
  function isHTMLFragment( filename ) {
    return !( /\<html[^>]*\>/m ).test( cat( filename ) );
  }

  // List of errors/warnings to ignore, some with a conditional
  // to only ignore when some condition is true.
  var ignoreList = [
    {
      text: "Error: Start tag seen without seeing a doctype first. Expected “<!DOCTYPE html>”.",
      when: isHTMLFragment
    },
    {
      text: "Error: Element “head” is missing a required instance of child element “title”.",
      when: isHTMLFragment
    },
    {
      text: "Error: Bad value “X-UA-Compatible” for attribute “http-equiv” on element “meta”."
    },
    {
      text: "Warning: The character encoding of the document was not declared."
    },
    {
      // Let <style> be in fragments.
      text: "Error: Element “style” not allowed as child of element “body” in this context. (Suppressing further errors from this subtree.)",
      when: isHTMLFragment
    }
  ];

  var files = find([
    EDITORS_DIR,
    join( SRC_DIR, "layouts" ),
    join( SRC_DIR, "editor" ),
    TEMPLATES_DIR ] ).filter( function( file ) {
    return file.match( /\.html$/ );
  }).forEach( function( filename ) {
    checkHTMLFile( filename, ignoreList );
  });
};


target.docs = function() {
  echo('### Creating documentation from src...');
  mkdir('-p', DOCS_DIR);

  var files = find( SRC_DIR ).filter( function( file ) {
    return file.match(/\.js$/);
  });

  var docTypes = [
    'md'
  ];

  for (var i = files.length - 1; i >= 0; i--) {
    echo('### Processing documentation for ' + files[i]);
    for (var j = docTypes.length - 1; j >= 0; j--) {
      var newFileName = DOCS_DIR + '/' + files[i].substring(4).replace(/\//g, '-').replace(/\.js$/, '.' + docTypes[j]),
          command = 'python ' + DOX + ' -t ' + docTypes[j] + ' -o '+ newFileName + ' -i ' + files[i];
      exec(command);
    };
  };
};

target.check = function() {
  checkJS( SRC_DIR, EDITORS_DIR, CORNFIELD_DIR );
  checkCSS( CSS_DIR );
  target["check-html"]();
};

target['check-templates'] = function() {
  checkJS( TEMPLATES_DIR );
  checkCSS( TEMPLATES_DIR );
};

target['check-css'] = function( dirs ) {
  checkCSS( CSS_DIR );
};

target['check-tests'] = function( dir ) {
  checkJS( TEST_DIR );
};

// If compress is true, crush CSS down, otherwise leave expanded.
function lessToCSS( compress ){
  echo( "### Building CSS using LESS (" +
        ( compress ? "with" : "without" ) +
        " compression)" );

  var args = compress ? " --yui-compress " : " ",
  result = exec(LESS + args + BUTTER_LESS_FILE, {silent:true});

  if( result.code === 0 ){
    var css = BUTTER_CSS_FILE_COMMENT + "\n\n" + result.output;
    css.to( BUTTER_CSS_FILE );
    // Our /* csslint-ignore */ override can't work when compressed.
    // People should lint on their own separate to that.
    if( !compress ) {
      target['check-css']();
    }
  } else {
    echo( result.output );
  }
}

function stampVersion( version, filename ){
  // Stamp embed.version with supplied version, or git info
  version = version ||exec( 'git describe',
                            {silent:true} ).output.replace( /\r?\n/m, "" );
  sed( '-i', '@VERSION@', version, filename );
}

function embed( version ){
  echo('### Building embed');

  target.dist();

  exec(RJS + ' -o tools/embed.js');
  stampVersion( version, 'dist/embed.js' );

  exec(RJS + ' -o tools/embed.optimized.js');
  stampVersion( version, 'dist/embed.min.js' );
}

target.embed = function(){
  // To pass a release version number, use:
  // $ VERSION=0.5 node make embed
  var version = env['VERSION'];

  embed( version );
};

target.css = function() {
  // Leave CSS expanded if building in tree (for debugging)
  lessToCSS( false );
};

function build( version ){
  echo('### Building butter');

  target.dist();

  exec(RJS + ' -o tools/build.js');
  stampVersion( version, 'dist/butter.js' );

  exec(RJS + ' -o tools/build.optimized.js');
  stampVersion( version, 'dist/butter.min.js' );

  // Compress CSS for deployment
  lessToCSS( true );

  cp( "-f", BUTTER_CSS_FILE, DIST_DIR );
}

target.build = function(){
  build();
};

target.server = function() {
  echo('### Serving butter');

  cd( CORNFIELD_DIR );

  // Use child_process.spawn here for a long-running server process
  // (replaces `exec('node app.js', { async: true });`).
  var server = spawn( 'node', [ 'app.js' ] );

  // Mostly stolen from http://nodejs.org/docs/v0.3.5/api/child_processes.html#child_process.spawn
  server.stdout.on( 'data', function( data ) {
    process.stdout.write( data );
  });

  server.stderr.on( 'data', function( data ) {
    process.stderr.write( "" + data );
  });

  server.on( 'exit', function( code ) {
    console.log( 'server process exited with code ' + code );
  });
};

target.package = function() {
  echo('### Making Butter Package');

  target.build();

  cp('-R', 'editors', DIST_DIR);
  cp('-R', 'resources', DIST_DIR);
  cp('-R', 'templates', DIST_DIR);

  echo('### Creating butter.zip');
  cd(DIST_DIR);
  exec('zip -r ' + PACKAGE_NAME + '.zip ' + ls('.').join(' '));
};

target['buttered-popcorn'] = function(){
  echo('### Making Combined Popcorn for Butter: Buttered Popcorn');

  var defaultConfig = require( DEFAULT_CONFIG ),
      popcornDir = defaultConfig.dirs['popcorn-js'].replace( '{{baseDir}}', './' ),
      players = defaultConfig.player.players,
      plugins = defaultConfig.plugin.plugins,
      popcornFiles = [];

  // Popcorn License Header
  popcornFiles.push( popcornDir + '/LICENSE_HEADER' );

  // classList shim
  popcornFiles.push( './tools/classlist-shim.js' );

  // popcorn IE8 shim
  popcornFiles.push( popcornDir + '/ie8/popcorn.ie8.js' );

  // popcorn.js
  popcornFiles.push( popcornDir + '/popcorn.js' );

  // plugins
  plugins.forEach( function( plugin ){
    popcornFiles.push( plugin.path.replace( '{{baseDir}}', './' ) );
  });

  // module for baseplayer
  popcornFiles.push( popcornDir + '/modules/player/popcorn.player.js' );

  // players
  players.forEach( function( player ){
    popcornFiles.push( player.path.replace( '{{baseDir}}', './' ) );
  });

  // Stamp Popcorn.version with the git commit sha we are using
  var cwd = pwd();
  cd( popcornDir );
  var popcornVersion = exec('git describe',
                       {silent:true}).output.replace(/\r?\n/m, "");
  cd( cwd );

  // Write out dist/buttered-popcorn.js
  cat( popcornFiles ).to( BUTTERED_POPCORN );
  sed('-i', '@VERSION', popcornVersion, BUTTERED_POPCORN);

  // Write out dist/buttered-popcorn.min.js
  exec( UGLIFY + ' --output ' + BUTTERED_POPCORN_MIN + ' ' + BUTTERED_POPCORN );
};

target.release = function() {
  echo('### Making Butter Release');

  // To pass a release version number, use:
  // $ VERSION=0.5 node make release
  var version = env['VERSION'];

  if( !version ){
    echo( "ERROR: Must provide a version when building a release: VERSION=XXX node make release" );
    return;
  }

  build( version );

  // Build buttered-popcorn.js
  target['buttered-popcorn']();

  // Copy over templates and other resources
  cp('-R', 'editors', DIST_DIR);
  cp('-R', 'resources', DIST_DIR);
  cp('-R', 'templates', DIST_DIR);

  echo('### Creating butter.zip');
  cd(DIST_DIR);
  exec('zip -r ' + PACKAGE_NAME + '.zip ' + ls('.').join(' '));
};

target.beautify = function( a ) {
  echo('### Beautifying butter');
  cd('tools');
  exec('./beautify.sh');
};

target.test = function() {
  var unbeautified = [ "if.js", "for.js", "while.js", "array.js", "function.js", "object.js", "comments.js", "eolspace.js" ],
      beautified = [ "if.expected.js", "for.expected.js", "while.expected.js", "array.expected.js", "function.expected.js", "object.expected.js", "comments.expected.js", "eolspace.expected.js" ],
      result;

  echo('### Testing Beautifier');
  for( var i = 0, l = unbeautified.length; i < l; i++ ) {
    result = exec('bash test/beautifier/test.sh ' + unbeautified[ i ] + ' ' + beautified[ i ]);
    rm('tmp.txt');
    // checking against a length of 1 because if the output is empty a newline character gets returned
    if( result.output.length === 1 ) {
      echo(unbeautified[ i ] + ' was beautified correctly');
    } else {
      echo(unbeautified[ i ] + ' did not beautify correctly');
    }
  }
};

target.storycamp = function(){
  echo('### Making single file version of Butter + Popcorn (use UNMINIFIED=1 for unminified)');

  // To get unminified butter.js, use the UNMINIFIED env variable:
  // $ UNMINIFIED=1 node make storycamp
  var unminified = env['UNMINIFIED'] === "1";

  build( 'storycamp' );
  target['buttered-popcorn']();

  var storyCamp = 'butter.js',
      storyCampMin = 'butter.min.js';

  function makeButterJS( keepMe, deleteMe ){
    echo( '### Cleaning temp files' );
    cd( DIST_DIR );
    rm( '-f', deleteMe );

    // Mirror layout in butter/ so templates are happy, renaming to src/butter.js
    mkdir( 'src' );
    mv( keepMe, './src/butter.js' );
  }

  var cwd = pwd();

  // Depending on whether we want minified source, keep one, delete one.
  if( unminified ){
    makeButterJS( storyCamp, storyCampMin );
  } else {
    // Write out dist/storycamp-butter.min.js
    exec( UGLIFY + ' --output ' + DIST_DIR + '/' + storyCampMin + ' ' + DIST_DIR + '/' + storyCamp );
    makeButterJS( storyCampMin, storyCamp );
  }

  // Move css files into dist/css
  mkdir('css');
  mv('*.css', './css');

  // Copy other assets over
  cd(cwd);
  cp('-R', 'editors', DIST_DIR);
  cp('-R', 'resources', DIST_DIR);
  cp('-R', 'templates', DIST_DIR);
  cp('-R', 'cornfield', DIST_DIR);

  // Copy the popcorn test videos over
  mkdir('-p', './dist/external/popcorn-js/test');
  cp('external/popcorn-js/test/trailer.*', './dist/external/popcorn-js/test');

  // Copy the rest of the popcorn plugins over in case templates look for them
  mkdir('-p', './dist/external/popcorn-js/plugins');
  cp('-R', 'external/popcorn-js/plugins/*', './dist/external/popcorn-js/plugins');

  // Export will need a version of popcorn.js where the templates expect it
  // at dist/external/popcorn-js/popcorn.js
  cd( DIST_DIR );
  if( unminified ){
    mv( 'buttered-popcorn.js', './external/popcorn-js/popcorn.js' );
    rm( '-f', 'buttered-popcorn.min.js' );
  } else {
    mv( 'buttered-popcorn.min.js', './external/popcorn-js/popcorn.js' );
    rm( '-f', 'buttered-popcorn.js' );
  }
};
