// PLUGIN: Google Maps
/*global google*/

var googleCallback;
(function ( Popcorn ) {

  // We load our own cached copy of this in order to deal with mix-content (http vs. https).
  // At some point the stamen API is going to change, and this will break.
  // We'll need to watch for this. NOTE: if you change the location of this file, the path
  // below needs to reflect that change.
  var STAMEN_BUTTER_CACHED_URL = "/external/stamen/tile.stamen-1.2.0.js";

  var _mapFired = false,
      _mapLoaded = false,
      // Store location objects in case the same string location is used multiple times.
      _cachedGeoCode = {},
      MAP_FAILURE_TIMEOUT = 100,
      geocoder;

  //google api callback
  window.googleCallback = function( data ) {
    // ensure all of the maps functions needed are loaded
    // before setting _maploaded to true
    if ( typeof google !== "undefined" && google.maps && google.maps.Geocoder && google.maps.LatLng ) {
      geocoder = new google.maps.Geocoder();
      Popcorn.getScript( STAMEN_BUTTER_CACHED_URL, function() {
        _mapLoaded = true;
      });
    } else {
      setTimeout(function () {
        googleCallback( data );
      }, 10);
    }
  };
  // function that loads the google api
  function loadMaps() {
    // for some reason the Google Map API adds content to the body
    if ( document.body ) {
      _mapFired = true;
      Popcorn.getScript( "//maps.google.com/maps/api/js?sensor=false&callback=googleCallback" );
    } else {
      setTimeout(function () {
        loadMaps();
      }, 10);
    }
  }

  /**
   * googlemap popcorn plug-in
   * Adds a map to the target div centered on the location specified by the user
   * Options parameter will need a start, end, target, type, zoom, lat and lng, and location
   * -Start is the time that you want this plug-in to execute
   * -End is the time that you want this plug-in to stop executing
   * -Target is the id of the DOM element that you want the map to appear in. This element must be in the DOM
   * -Type [optional] either: HYBRID (default), ROADMAP, SATELLITE, TERRAIN, STREETVIEW, or one of the
   *                          Stamen custom map types (http://http://maps.stamen.com): STAMEN-TONER,
   *                          STAMEN-WATERCOLOR, or STAMEN-TERRAIN.
   * -Zoom [optional] defaults to 10
   * -Heading [optional] STREETVIEW orientation of camera in degrees relative to true north (0 north, 90 true east, ect)
   * -Pitch [optional] STREETVIEW vertical orientation of the camera (between 1 and 3 is recommended)
   * -Lat and Lng: the coordinates of the map must be present if location is not specified.
   * -Height [optional] the height of the map, in "px" or "%". Defaults to "100%".
   * -Width [optional] the width of the map, in "px" or "%". Defaults to "100%".
   * -Location: the adress you want the map to display, must be present if lat and lng are not specified.
   * Note: using location requires extra loading time, also not specifying both lat/lng and location will
   * cause and error.
   *
   * Tweening works using the following specifications:
   * -location is the start point when using an auto generated route
   * -tween when used in this context is a string which specifies the end location for your route
   * Note that both location and tween must be present when using an auto generated route, or the map will not tween
   * -interval is the speed in which the tween will be executed, a reasonable time is 1000 ( time in milliseconds )
   * Heading, Zoom, and Pitch streetview values are also used in tweening with the autogenerated route
   *
   * -tween is an array of objects, each containing data for one frame of a tween
   * -position is an object with has two paramaters, lat and lng, both which are mandatory for a tween to work
   * -pov is an object which houses heading, pitch, and zoom paramters, which are all optional, if undefined, these values default to 0
   * -interval is the speed in which the tween will be executed, a reasonable time is 1000 ( time in milliseconds )
   *
   * @param {Object} options
   *
   * Example:
   var p = Popcorn("#video")
   .googlemap({
    start: 5, // seconds
    end: 15, // seconds
    type: "ROADMAP",
    target: "map"
   } )
   *
   */

  Popcorn.plugin( "googlemap", {
    manifest: {
      about: {
        name: "Popcorn Google Map Plugin",
        version: "0.1",
        author: "@annasob, Matthew Schranz @mjschranz",
        website: "annasob.wordpress.com, http://github.com/mjschranz",
        attribution: "Map tiles by <a target=\"_blank\" href=\"http://stamen.com\">Stamen Design</a>," +
          "under <a target=\"_blank\" href=\"http://creativecommons.org/licenses/by/3.0\">CC BY 3.0</a>. " +
          "Data by <a target=\"_blank\" href=\"http://openstreetmap.org\">OpenStreetMap</a>, " +
          "under <a target=\"_blank\" href=\"http://creativecommons.org/licenses/by-sa/3.0\">CC BY SA</a>."
      },
      options: {
        start: {
          elem: "input",
          type: "number",
          label: "Start",
          "units": "seconds"
        },
        end: {
          elem: "input",
          type: "number",
          label: "End",
          "units": "seconds"
        },
        type: {
          elem: "select",
          options: [ "Road Map", "Satellite", "Street View", "Hybrid", "Terrain", "Stamen - Water Color", "Stamen - Terrain", "Stamen - Toner" ],
          values: [ "ROADMAP", "SATELLITE", "STREETVIEW", "HYBRID", "TERRAIN", "STAMEN-WATERCOLOR", "STAMEN-TERRAIN", "STAMEN-TONER" ],
          label: "Map Type",
          "default": "ROADMAP",
          optional: true
        },
        location: {
          elem: "input",
          type: "text",
          label: "Location",
          "default": "Toronto, Ontario, Canada"
        },
        fullscreen: {
          elem: "input",
          type: "checkbox",
          label: "Full-Screen",
          "default": false,
          optional: true
        },
        heading: {
          elem: "input",
          type: "number",
          label: "Heading",
          "default": 0,
          optional: true
        },
        pitch: {
          elem: "input",
          type: "number",
          label: "Pitch",
          "default": 1,
          optional: true
        },
        zoom: {
          elem: "input",
          type: "number",
          label: "Zoom",
          "default": 10,
          optional: true
        },
        transition: {
          elem: "select",
          options: [ "None", "Pop", "Fade", "Slide Up", "Slide Down" ],
          values: [ "popcorn-none", "popcorn-pop", "popcorn-fade", "popcorn-slide-up", "popcorn-slide-down" ],
          label: "Transition",
          "default": "popcorn-fade"
        },
        left: {
          elem: "input",
          type: "number",
          label: "Left",
          units: "%",
          "default": 15,
          hidden: true
        },
        top: {
          elem: "input",
          type: "number",
          label: "Top",
          units: "%",
          "default": 15,
          hidden: true
        },
        width: {
          elem: "input",
          type: "number",
          label: "Width",
          units: "%",
          "default": 70,
          hidden: true
        },
        height: {
          elem: "input",
          type: "number",
          label: "height",
          units: "%",
          "default": 70,
          hidden: true
        },
        lat: {
          elem: "input",
          type: "number",
          label: "Lat",
          optional: true,
          hidden: true
        },
        lng: {
          elem: "input",
          type: "number",
          label: "Lng",
          optional: true,
          hidden: true
        },
        zindex: {
          hidden: true
        }
      }
    },
    _setup: function( options ) {
      var outerdiv, innerdiv, map, location,
          target = Popcorn.dom.find( options.target ),
          that = this,
          sView,
          MAX_MAP_ZOOM_VALUE = 22,
          DEFAULT_MAP_ZOOM_VALUE = options._natives.manifest.options.zoom[ "default" ],
          MAX_MAP_PITCH_VALUE = 12,
          DEFAULT_MAP_PITCH_VALUE = options._natives.manifest.options.pitch[ "default" ],
          MAX_MAP_HEADING_VALUE = 12,
          DEFAULT_MAP_HEADING_VALUE = options._natives.manifest.options.heading[ "default" ];

      function buildMap( options, mapDiv ) {
        var type = options.type ? options.type.toUpperCase() : "ROADMAP",
            layer;

        // See if we need to make a custom Stamen map layer
        if ( type === "STAMEN-WATERCOLOR" ||
             type === "STAMEN-TERRAIN"    ||
             type === "STAMEN-TONER" ) {
          // Stamen types are lowercase
          layer = type.replace( "STAMEN-", "" ).toLowerCase();
        }

        var map = new google.maps.Map( mapDiv, {
          // If a custom layer was specified, use that, otherwise use type
          mapTypeId: layer ? layer : google.maps.MapTypeId[ type ],
          // Hide the layer selection UI
          mapTypeControlOptions: {
            mapTypeIds: []
          }
        });

        if ( layer ) {
          map.mapTypes.set( layer, new google.maps.StamenMapType( layer ) );
        }

        return map;
      }

      if ( !target ) {
        target = that.media.parentNode;
      }

      options._target = target;

      options.type = options.type || "ROADMAP";
      options.lat = options.lat || 0;
      options.lng = options.lng || 0;
      options.height = options.height + "%";
      options.width = options.width + "%";
      options.left = options.left + "%";
      options.top = options.top + "%";

      // if this is the first time running the plugins
      // call the function that gets the sctipt
      if ( !_mapFired ) {
        loadMaps();
      }

      // create a new div this way anything in the target div is left intact
      // this is later passed on to the maps api
      innerdiv = document.createElement( "div" );
      innerdiv.style.width = "100%";
      innerdiv.style.height = "100%";

      outerdiv = document.createElement( "div" );
      outerdiv.id = Popcorn.guid( "googlemap" );
      outerdiv.style.width = options.width;
      outerdiv.style.height = options.height;
      outerdiv.style.left = options.left;
      outerdiv.style.top = options.top;
      outerdiv.style.zIndex = +options.zindex;
      outerdiv.style.position = "absolute";
      outerdiv.classList.add( options.transition );
      outerdiv.classList.add( "off" );

      outerdiv.appendChild( innerdiv );
      options._container = outerdiv;

      if ( target ) {
        target.appendChild( outerdiv );
      }

      // ensure the map has been initialized in the setup function above
      var isMapSetup = function() {

        if ( map ) {
          google.maps.event.trigger( map, "resize" );
          map.setCenter( location );

          // make sure options.zoom is a number
          if ( options.zoom && typeof options.zoom !== "number" ) {
            options.zoom = +options.zoom >= 0 && +options.zoom <= MAX_MAP_ZOOM_VALUE ? +options.zoom : DEFAULT_MAP_ZOOM_VALUE;
          }

          map.setZoom( options.zoom );

          if ( options.type === "STREETVIEW" ) {

            //Make sure heading is a number
            if ( options.heading && typeof options.heading !== "number" ) {
              options.heading = +options.heading >= 0 && +options.heading <= MAX_MAP_HEADING_VALUE ? +options.heading : DEFAULT_MAP_HEADING_VALUE;
            }
            //Make sure pitch is a number
            if ( options.pitch && typeof options.pitch !== "number" ) {
              options.pitch = +options.pitch >= 0 && +options.pitch <= MAX_MAP_PITCH_VALUE ? +options.pitch : DEFAULT_MAP_PITCH_VALUE;
            }

            // Switch this map into streeview mode
            map.setStreetView(
              // Pass a new StreetViewPanorama instance into our map
              sView = new google.maps.StreetViewPanorama( innerdiv, {
                position: location,
                pov: {
                  heading: options.heading,
                  pitch: options.pitch,
                  zoom: options.zoom
                }
              })
            );
          }

          // For some reason, in some cases the map can wind up being undefined at this point
          if ( options.onmaploaded && map ) {
            options.onmaploaded( options, map );
          }

        } else {
          setTimeout(function () {
            isMapSetup();
          }, 50 );
        }

      };

      function geoCodeCallback( results, status ) {
        // second check for innerdiv since it could have disappeared before
        // this callback is actually run
        if ( !innerdiv ) {
          return;
        }

        if ( status === google.maps.GeocoderStatus.OK ) {
          options.lat = results[ 0 ].geometry.location.lat();
          options.lng = results[ 0 ].geometry.location.lng();
          _cachedGeoCode[ options.location ] = location = new google.maps.LatLng( options.lat, options.lng );

          options._map = map = buildMap( options, innerdiv );
          isMapSetup();
        } else if ( status === google.maps.GeocoderStatus.OVER_QUERY_LIMIT ) {
          setTimeout(function() {
            // calls an anonymous google function called on separate thread
            geocoder.geocode({
              "address": options.location
            }, geoCodeCallback );
          }, MAP_FAILURE_TIMEOUT );
        } else {
          // Some other failure occured
          console.warn( "Google maps geocoder returned status: " + status );
        }
      }

      // ensure that google maps and its functions are loaded
      // before setting up the map parameters
      var isMapReady = function () {
        if ( _mapLoaded ) {
          if ( innerdiv ) {
            if ( options.location ) {
              location = _cachedGeoCode[ options.location ];

              if ( location ) {
                options._map = map = buildMap( options, innerdiv );
                isMapSetup();
              } else {
                // calls an anonymous google function called on separate thread
                geocoder.geocode({
                  "address": options.location
                }, geoCodeCallback );
              }

            } else {
              location = new google.maps.LatLng( options.lat, options.lng );
              options._map = map = buildMap( options, innerdiv );
              isMapSetup();
            }
          }
        } else {
            setTimeout(function () {
              isMapReady();
            }, 5);
          }
        };

      isMapReady();

      options.toString = function() {
        return options.location || ( ( options.lat && options.lng ) ? options.lat + ", " + options.lng : options._natives.manifest.options.location[ "default" ] );
      };
    },
    start: function( event, options ) {
      if ( options._container ) {
        options._container.classList.remove( "off" );
        options._container.classList.add( "on" );
      }
    },
    end: function( event, options ) {
      // if the map exists hide it do not delete the map just in
      // case the user seeks back to time b/w start and end
      if ( options._container ) {
        options._container.classList.remove( "on" );
        options._container.classList.add( "off" );
      }
    },
    _teardown: function( options ) {
      // the map must be manually removed

      if ( options._target && options._container ) {
        options._target.removeChild( options._container );
      }

    }
  });
}( Popcorn ));
